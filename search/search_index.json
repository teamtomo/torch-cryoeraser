{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Overview","text":"<p>torch-cryoeraser is a Python package for erasing local regions of cryo-EM images in PyTorch.</p> <p> </p> <p> </p> <p>Image data in masked regions are replaced with noise matching local image statistics.</p>"},{"location":"#installation","title":"Installation","text":"<pre><code>pip install torch-cryoeraser\n</code></pre>"},{"location":"#usage","title":"Usage","text":"<pre><code>import torch\nimport tifffile\nfrom torch_cryoeraser import erase_region_2d\n\n# load image and mask\nimage = tifffile.imread(\"image.tif\")\nmask = tifffile.imread(\"mask.tif\")\n\n# to torch tensor\nimage = torch.tensor(image)\nmask = torch.tensor(mask)\n\n# erase masked regions\nerased_image = erase_region_2d(image=image, mask=mask)\n</code></pre>"},{"location":"examples/erase_fiducials/","title":"Erase fiducials","text":"In\u00a0[1]: Copied! <pre>from pathlib import Path\n\nimport tifffile\nimport numpy as np\nimport torch\nimport pooch\nfrom matplotlib import pyplot as plt\nfrom torch_cryoeraser import erase_region_2d\n</pre> from pathlib import Path  import tifffile import numpy as np import torch import pooch from matplotlib import pyplot as plt from torch_cryoeraser import erase_region_2d In\u00a0[2]: Copied! <pre># https://github.com/fatiando/pooch\nGOODBOY = pooch.create(\n    path=pooch.os_cache(\"torch-cryoeraser\"),\n    base_url=\"doi:10.5281/zenodo.15269648/\",\n    registry={\n        \"EMPIAR-10164_TS_01_000_0.0_image.tif\": \"md5:5ae21ea749fd7298c6991dd9f8872b44\",\n        \"EMPIAR-10164_TS_01_000_0.0_mask.tif\": \"md5:aae7af9995e0cede9d3d7c5ab4a9b1bf\",\n    },\n)\n\nIMAGE_FILE = Path(GOODBOY.fetch(\"EMPIAR-10164_TS_01_000_0.0_image.tif\", progressbar=True))\nMASK_FILE = Path(GOODBOY.fetch(\"EMPIAR-10164_TS_01_000_0.0_mask.tif\", progressbar=True))\n</pre> # https://github.com/fatiando/pooch GOODBOY = pooch.create(     path=pooch.os_cache(\"torch-cryoeraser\"),     base_url=\"doi:10.5281/zenodo.15269648/\",     registry={         \"EMPIAR-10164_TS_01_000_0.0_image.tif\": \"md5:5ae21ea749fd7298c6991dd9f8872b44\",         \"EMPIAR-10164_TS_01_000_0.0_mask.tif\": \"md5:aae7af9995e0cede9d3d7c5ab4a9b1bf\",     }, )  IMAGE_FILE = Path(GOODBOY.fetch(\"EMPIAR-10164_TS_01_000_0.0_image.tif\", progressbar=True)) MASK_FILE = Path(GOODBOY.fetch(\"EMPIAR-10164_TS_01_000_0.0_mask.tif\", progressbar=True)) In\u00a0[3]: Copied! <pre># load images as torch tensors\nimage = tifffile.imread(IMAGE_FILE)\nimage = torch.tensor(image)\nmask = tifffile.imread(MASK_FILE)\nmask = torch.tensor(mask)\n\n# erase masked regions\nerased_image = erase_region_2d(image, mask)\n</pre> # load images as torch tensors image = tifffile.imread(IMAGE_FILE) image = torch.tensor(image) mask = tifffile.imread(MASK_FILE) mask = torch.tensor(mask)  # erase masked regions erased_image = erase_region_2d(image, mask)  In\u00a0[4]: Copied! <pre># visualize data and result\nmasked_mask = np.where(mask.numpy() == 1, mask, np.nan)\n\nfig, axs = plt.subplots(ncols=2)\naxs[0].imshow(image, cmap=\"grey\")\naxs[0].imshow(masked_mask, cmap=\"Purples\", alpha=0.3, vmin=0, vmax=1)\naxs[1].imshow(erased_image, cmap=\"grey\")\n\naxs[0].set_axis_off()\naxs[1].set_axis_off()\n</pre> # visualize data and result masked_mask = np.where(mask.numpy() == 1, mask, np.nan)  fig, axs = plt.subplots(ncols=2) axs[0].imshow(image, cmap=\"grey\") axs[0].imshow(masked_mask, cmap=\"Purples\", alpha=0.3, vmin=0, vmax=1) axs[1].imshow(erased_image, cmap=\"grey\")  axs[0].set_axis_off() axs[1].set_axis_off()"}]}